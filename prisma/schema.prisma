generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId           String           @id @default(cuid())
  firstName        String
  lastName         String
  email            String           @unique
  passwordHash     String
  avatar           CloudinaryImage? @relation(fields: [avatarId], references: [cloudinaryImageId])
  avatarId         String?
  isActive         Boolean          @default(true)
  emailVerified    Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime? // Xóa mềm
  friendships1     Friendship[]     @relation("FriendshipUser1")
  friendships2     Friendship[]     @relation("FriendshipUser2")
  groupMemberships GroupMember[]
  messagesSent     Message[]        @relation("MessageSender")
  messagesReceived Message[]        @relation("MessageReceiver")
  realtimePosts    RealtimePost[]
  reupPosts        ReupPost[]
  groups           Group[]
  sharedUsers      SharedUser[]
  costSharings     CostSharing[]    @relation("CostSharingPayer")
  plans            Plan[]
}

model Friendship {
  friendshipId String   @id @default(cuid())
  user1        User     @relation("FriendshipUser1", fields: [user1Id], references: [userId])
  user1Id      String
  user2        User     @relation("FriendshipUser2", fields: [user2Id], references: [userId])
  user2Id      String
  status       String   @default("pending") // 'pending', 'accepted', 'blocked'
  createdAt    DateTime @default(now())

  @@unique([user1Id, user2Id])
}

model Group {
  groupId       String         @id @default(cuid())
  name          String
  createdBy     User           @relation(fields: [createdById], references: [userId])
  createdById   String
  createdAt     DateTime       @default(now())
  members       GroupMember[]
  messages      Message[]
  plans         Plan[]
  realtimePosts RealtimePost[]
}

model GroupMember {
  GroupMemberId String   @id @default(cuid())
  group         Group    @relation(fields: [groupId], references: [groupId])
  groupId       String
  user          User     @relation(fields: [userId], references: [userId])
  userId        String
  role          String   @default("member") // 'admin', 'member'
  joinedAt      DateTime @default(now())
}

model RealtimePost {
  realtimePostId String            @id @default(cuid())
  group          Group?             @relation(fields: [groupId], references: [groupId])
  groupId        String?
  user           User              @relation(fields: [userId], references: [userId])
  userId         String
  caption        String?
  postedAt       DateTime          @default(now())
  images         CloudinaryImage[] // Liên kết với các ảnh tải lên
  reupPosts      ReupPost[]
  deletedAt      DateTime? // Xóa mềm
  isOnlyUser     Boolean           @default(true) // Chỉ hiển thị cho user đăng
}

model CloudinaryImage {
  cloudinaryImageId String         @id @default(cuid())
  plan              Plan?          @relation("PlanRealtimeImages", fields: [planId], references: [planId]) // Liên kết ảnh realtime với Plan
  planId            String?
  publicId          String // ID của ảnh trên Cloudinary
  imageUrl          String // URL truy cập ảnh
  type              String // Loại ảnh: 'realtime', 'thumbnail'
  format            String // Định dạng ảnh (jpeg, png, v.v.)
  width             Int?
  height            Int?
  createdAt         DateTime       @default(now())
  post              RealtimePost[]
  userAvatar        User[]
  planLocation      PlanLocation[]
  plans             Plan[]
}

model Message {
  messageId  String   @id @default(cuid())
  sender     User     @relation("MessageSender", fields: [senderId], references: [userId])
  senderId   String
  receiver   User?    @relation("MessageReceiver", fields: [receiverId], references: [userId])
  receiverId String?
  group      Group?   @relation(fields: [groupId], references: [groupId])
  groupId    String?
  text       String?
  type       String   @default("text") // 'text', 'image', 'realtime_image'
  sentAt     DateTime @default(now())
}

model ReupPost {
  reupPostId     String       @id @default(cuid())
  originalPost   RealtimePost @relation(fields: [originalPostId], references: [realtimePostId])
  originalPostId String
  user           User         @relation(fields: [userId], references: [userId])
  userId         String
  reupAt         DateTime     @default(now())
}

model Plan {
  planId         String            @id @default(cuid())
  createdBy      User?              @relation(fields: [createdById], references: [userId]) // Người tạo trip
  createdById    String?
  group          Group?             @relation(fields: [groupId], references: [groupId])
  groupId        String?
  name           String
  startDate      DateTime?
  endDate        DateTime?
  totalCost      Float?
  isCompleted    Boolean           @default(false) // Đánh dấu kế hoạch đã hoàn thành
  thumbnail      CloudinaryImage?  @relation(fields: [thumbnailId], references: [cloudinaryImageId]) // Ảnh thumbnail
  thumbnailId    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
  realtimeImages CloudinaryImage[] @relation("PlanRealtimeImages") // Ảnh realtime trong quá trình
  planLocations  PlanLocation[]
  planCosts      CostSharing[]
}

model PlanLocation {
  planLocationId String           @id @default(cuid())
  plan           Plan             @relation(fields: [planId], references: [planId])
  planId         String
  name           String
  latitude       Float?
  longitude      Float?
  address        String?
  googlePlaceId  String?
  estimatedCost  Float?
  estimatedTime  Int? // Phút
  isCompleted    Boolean          @default(false) // Đánh dấu chặng đã hoàn thành
  image          CloudinaryImage? @relation(fields: [imageId], references: [cloudinaryImageId]) // Ảnh của chặng
  imageId        String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
}

model CostSharing {
  costShareId String       @id @default(cuid())
  plan        Plan         @relation(fields: [planId], references: [planId])
  planId      String
  payer       User         @relation("CostSharingPayer", fields: [payerId], references: [userId])
  payerId     String
  amount      Float
  sharedWith  String       @default("group") // 'group', 'individuals'
  sharedUsers SharedUser[]
}

model SharedUser {
  SharedUserid String      @id @default(cuid())
  costShare    CostSharing @relation(fields: [costShareId], references: [costShareId])
  costShareId  String
  user         User        @relation(fields: [userId], references: [userId])
  userId       String
}
