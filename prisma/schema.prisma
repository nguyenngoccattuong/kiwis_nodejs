generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId            String             @id @default(cuid())
  firstName         String
  lastName          String
  email             String             @unique
  passwordHash      String
  avatar            CloudinaryImage?   @relation(fields: [avatarId], references: [cloudinaryImageId])
  avatarId          String?
  isActive          Boolean            @default(true)
  emailVerified     Boolean            @default(false)
  fcmToken          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime? // Xóa mềm
  friendships1      Friendship[]       @relation("FriendshipUser1")
  friendships2      Friendship[]       @relation("FriendshipUser2")
  groupMemberships  GroupMember[]
  messagesSent      Message[]          @relation("MessageSender")
  messagesReceived  Message[]          @relation("MessageReceiver")
  realtimePosts     RealtimePost[]
  reupPosts         ReupPost[]
  groups            Group[]
  sharedUsers       SharedUser[]
  costSharings      CostSharing[]      @relation("CostSharingPayer")
  plans             Plan[]
  otps              Otp[]
  userPostEmotions  UserPost_Emotion[]
  userPostSaves     UserPost_Save[]
  postFeeds         PostFeed[]
  socketConnections SocketConnection[]
}

model Friendship {
  friendshipId String   @id @default(cuid())
  user1        User     @relation("FriendshipUser1", fields: [user1Id], references: [userId])
  user1Id      String
  user2        User     @relation("FriendshipUser2", fields: [user2Id], references: [userId])
  user2Id      String
  status       String   @default("pending") // 'pending', 'accepted', 'blocked'
  createdAt    DateTime @default(now())

  @@unique([user1Id, user2Id])
  @@index([user1Id, user2Id])
}

model Group {
  groupId       String           @id @default(cuid())
  name          String?
  createdBy     User?            @relation(fields: [createdById], references: [userId])
  createdById   String?
  createdAt     DateTime         @default(now())
  avatar        CloudinaryImage? @relation(fields: [avatarId], references: [cloudinaryImageId])
  avatarId      String?
  type          GroupType        @default(DEFAULT)
  members       GroupMember[]
  messages      Message[]
  plans         Plan[]
  realtimePosts RealtimePost[]
}

model GroupMember {
  group    Group           @relation(fields: [groupId], references: [groupId])
  groupId  String
  user     User            @relation(fields: [userId], references: [userId])
  userId   String
  role     GroupMemberRole @default(DEFAULT)
  joinedAt DateTime        @default(now())

  @@id([groupId, userId])
}

model RealtimePost {
  realtimePostId   String             @id @default(cuid())
  group            Group?             @relation(fields: [groupId], references: [groupId])
  groupId          String?
  user             User               @relation(fields: [userId], references: [userId])
  userId           String
  caption          String?
  postedAt         DateTime           @default(now())
  images           CloudinaryImage[]
  reupPosts        ReupPost[]
  deletedAt        DateTime?
  userPostEmotions UserPost_Emotion[]
  userPostSaves    UserPost_Save[]
  postFeeds        PostFeed[]
  messages         Message[]
  tasks             Task[]         @relation("TaskImages")
  taskImages        TaskImages[]
}

model CloudinaryImage {
  cloudinaryImageId String         @id @default(cuid())
  plan              Plan?          @relation("PlanRealtimeImages", fields: [planId], references: [planId]) // Liên kết ảnh realtime với Plan
  planId            String?
  publicId          String // ID của ảnh trên Cloudinary
  imageUrl          String // URL truy cập ảnh
  type              String // Loại ảnh: 'realtime', 'thumbnail'
  format            String // Định dạng ảnh (jpeg, png, v.v.)
  width             Int?
  height            Int?
  createdAt         DateTime       @default(now())
  group             Group[]
  post              RealtimePost[]
  userAvatar        User[]
  plans             Plan[]
}

model Message {
  messageId  String        @id @default(cuid())
  sender     User          @relation("MessageSender", fields: [senderId], references: [userId])
  senderId   String
  receiver   User?         @relation("MessageReceiver", fields: [receiverId], references: [userId])
  receiverId String?
  group      Group?        @relation(fields: [groupId], references: [groupId])
  groupId    String?
  text       String?
  type       MessageType   @default(TEXT)
  sentAt     DateTime      @default(now())
  postId     String?
  post       RealtimePost? @relation(fields: [postId], references: [realtimePostId])
}

model ReupPost {
  reupPostId     String       @id @default(cuid())
  originalPost   RealtimePost @relation(fields: [originalPostId], references: [realtimePostId])
  originalPostId String
  user           User         @relation(fields: [userId], references: [userId])
  userId         String
  reupAt         DateTime     @default(now())
}

model PostFeed {
  userId    String
  user      User         @relation(fields: [userId], references: [userId])
  postId    String
  post      RealtimePost @relation(fields: [postId], references: [realtimePostId])
  createdAt DateTime     @default(now())

  @@id([userId, postId])
  @@index([userId, createdAt])
}

model Plan {
  planId         String            @id @default(cuid())
  createdBy      User?             @relation(fields: [createdById], references: [userId]) // Người tạo trip
  createdById    String?
  group          Group?            @relation(fields: [groupId], references: [groupId])
  groupId        String?
  name           String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  totalCost      Float?
  isCompleted    Boolean           @default(false)
  thumbnail      CloudinaryImage?  @relation(fields: [thumbnailId], references: [cloudinaryImageId]) // Ảnh thumbnail
  thumbnailId    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
  isStart        Boolean           @default(false) // Đánh dấu kế hoạch đã bắt đầu
  realtimeImages CloudinaryImage[] @relation("PlanRealtimeImages") // Ảnh realtime trong quá trình
  planCosts      CostSharing[]
  tasks          Task[]
}

model PlanLocation {
  planLocationId String  @id @default(cuid())
  name           String
  latitude       Float?
  longitude      Float?
  address        String?
  googlePlaceId  String?
  estimatedCost  Float?
  estimatedTime  Int? // Phút
  isCompleted    Boolean @default(false) // Đánh dấu chặng đã hoàn thành

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  tasks        Task[]
  costSharings CostSharing[]
}

model CostSharing {
  costShareId    String                @id @default(cuid())
  plan           Plan                  @relation(fields: [planId], references: [planId])
  planId         String
  payer          User                  @relation("CostSharingPayer", fields: [payerId], references: [userId])
  payerId        String
  note           String?
  planLocation   PlanLocation?         @relation(fields: [planLocationId], references: [planLocationId])
  planLocationId String?
  amount         Float
  sharedWith     CostSharingSharedWith @default(GROUP)
  sharedUsers    SharedUser[]
}

model SharedUser {
  SharedUserid String      @id @default(cuid())
  costShare    CostSharing @relation(fields: [costShareId], references: [costShareId])
  costShareId  String
  user         User        @relation(fields: [userId], references: [userId])
  userId       String
  amount       Float
  isPaid       Boolean     @default(false)
}

model Otp {
  otpId     String   @id @default(cuid())
  code      String
  user      User?    @relation(fields: [userId], references: [userId])
  userId    String?
  otpType   OtpType
  exprire   DateTime
  isUsed    Boolean  @default(false)
  email     String
  createdAt DateTime @default(now())
}

model Task {
  taskId         String            @id @default(cuid())
  title          String
  description    String?
  startDate      DateTime
  endDate        DateTime
  status         TaskStatus        @default(TODO)
  totalCost      Float?
  planId         String
  plan           Plan              @relation(fields: [planId], references: [planId])
  planLocationId String?
  planLocation   PlanLocation?     @relation(fields: [planLocationId], references: [planLocationId])
  images         RealtimePost[]    @relation("TaskImages")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
  TaskImages     TaskImages[]

  @@index([planId, planLocationId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

model TaskImages {
  taskId            String
  postId            String
  task              Task            @relation(fields: [taskId], references: [taskId])
  post              RealtimePost    @relation(fields: [postId], references: [realtimePostId])

  @@id([taskId, postId]) // Composite key để đảm bảo uniqueness
}

model UserPost_Emotion {
  emotion   String
  post      RealtimePost @relation(fields: [postId], references: [realtimePostId])
  postId    String
  user      User         @relation(fields: [userId], references: [userId])
  userId    String
  createdAt DateTime     @default(now())
  status    String       @default("active") // 'active', 'inactive'

  @@unique([postId, userId])
}

model UserPost_Save {
  post      RealtimePost @relation(fields: [postId], references: [realtimePostId])
  postId    String
  user      User         @relation(fields: [userId], references: [userId])
  userId    String
  createdAt DateTime     @default(now())

  @@unique([postId, userId])
}

model SocketConnection {
  socketId   String   @unique
  userId     String   @unique
  lastActive DateTime @default(now())

  user User @relation(fields: [userId], references: [userId])

  @@id([userId, socketId]) // Composite primary key
}

enum GroupType {
  DEFAULT // user to user
  GROUP // group
}

enum CostSharingSharedWith {
  GROUP
  INDIVIDUALS
}

enum GroupMemberRole {
  ADMIN
  MEMBER
  DEFAULT // user to user
}

enum MessageType {
  TEXT
  IMAGE
  REALTIME_IMAGE
  COMMENT
}

enum OtpType {
  VERIFY_EMAIL
  RESET_PASSWORD
}
